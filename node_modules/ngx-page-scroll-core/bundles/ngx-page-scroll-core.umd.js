(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-page-scroll-core', ['exports', '@angular/core'], factory) :
    (global = global || self, factory(global['ngx-page-scroll-core'] = {}, global.ng.core));
}(this, (function (exports, core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * Represents a scrolling action
     */
    var PageScrollInstance = /** @class */ (function () {
        /**
         * Private constructor, requires the properties assumed to be the bare minimum.
         * Use the factory methods to create instances:
         *      {@link PageScrollService#create}
         */
        function PageScrollInstance(pageScrollOptions) {
            /**
             * These properties will be set/manipulated if the scroll animation starts
             */
            /* The initial value of the scrollTop or scrollLeft position when the animation starts */
            this.startScrollPosition = 0;
            /* Whether an interrupt listener is attached to the body or not */
            this.interruptListenersAttached = false;
            /* References to the timer instance that is used to perform the scroll animation to be
             able to clear it on animation end*/
            this.timer = null;
            if (!pageScrollOptions.scrollViews || pageScrollOptions.scrollViews.length === 0) {
                pageScrollOptions.scrollViews = [
                    pageScrollOptions.document.documentElement,
                    pageScrollOptions.document.body,
                    pageScrollOptions.document.body.parentNode,
                ];
                this.isInlineScrolling = false;
            }
            else {
                this.isInlineScrolling = true;
            }
            this.pageScrollOptions = pageScrollOptions;
        }
        PageScrollInstance.getScrollingTargetPosition = function (pageScrollOptions, scrollTargetElement) {
            var body = pageScrollOptions.document.body;
            var docEl = pageScrollOptions.document.documentElement;
            var windowPageYOffset = pageScrollOptions.document.defaultView &&
                pageScrollOptions.document.defaultView.pageYOffset || undefined;
            var windowPageXOffset = pageScrollOptions.document.defaultView &&
                pageScrollOptions.document.defaultView.pageXOffset || undefined;
            var scrollTop = windowPageYOffset || docEl.scrollTop || body.scrollTop;
            var scrollLeft = windowPageXOffset || docEl.scrollLeft || body.scrollLeft;
            var clientTop = docEl.clientTop || body.clientTop || 0;
            var clientLeft = docEl.clientLeft || body.clientLeft || 0;
            if (scrollTargetElement === undefined || scrollTargetElement === null) {
                // No element found, so return the current position to not cause any change in scroll position
                return { top: scrollTop, left: scrollLeft };
            }
            var box = scrollTargetElement.getBoundingClientRect();
            var top = box.top + scrollTop - clientTop;
            var left = box.left + scrollLeft - clientLeft;
            return { top: Math.round(top), left: Math.round(left) };
        };
        PageScrollInstance.getInlineScrollingTargetPosition = function (pageScrollOptions, scrollTargetElement) {
            var position = { top: scrollTargetElement.offsetTop, left: scrollTargetElement.offsetLeft };
            if (pageScrollOptions.advancedInlineOffsetCalculation && pageScrollOptions.scrollViews.length === 1) {
                var accumulatedParentsPos = { top: 0, left: 0 };
                // not named window to make sure we're not getting the global window variable by accident
                var theWindow = scrollTargetElement.ownerDocument.defaultView;
                var parentFound = false;
                // Start parent is the immediate parent
                var parent_1 = scrollTargetElement.parentElement;
                // Iterate upwards all parents
                while (!parentFound && parent_1 !== undefined && parent_1 !== null) {
                    if (theWindow.getComputedStyle(parent_1).getPropertyValue('position') === 'relative') {
                        accumulatedParentsPos.top += parent_1.offsetTop;
                        accumulatedParentsPos.left += parent_1.offsetLeft;
                    }
                    // Next iteration
                    parent_1 = parent_1.parentElement;
                    parentFound = parent_1 === pageScrollOptions.scrollViews[0];
                }
                if (parentFound) {
                    // Only use the results if we found the parent, otherwise we accumulated too much anyway
                    position.top += accumulatedParentsPos.top;
                    position.left += accumulatedParentsPos.left;
                }
                else {
                    /* TODO Uncomment
                    if (PageScrollConfig._logLevel >= 2 || (PageScrollConfig._logLevel >= 1 && isDevMode())) {
                      console.warn('Unable to find nested scrolling targets parent!');
                    }*/
                }
            }
            return position;
        };
        PageScrollInstance.prototype.getScrollPropertyValue = function (scrollingView) {
            if (!this.pageScrollOptions.verticalScrolling) {
                return scrollingView.scrollLeft;
            }
            return scrollingView.scrollTop;
        };
        PageScrollInstance.prototype.getScrollClientPropertyValue = function (scrollingView) {
            if (!this.pageScrollOptions.verticalScrolling) {
                return scrollingView.clientWidth;
            }
            return scrollingView.clientHeight;
        };
        /**
         * Extract the exact location of the scrollTarget element.
         *
         * Extract the scrollTarget HTMLElement from the given PageScrollTarget object. The latter one may be
         * a string like "#heading2", then this method returns the corresponding DOM element for that id.
         *
         */
        PageScrollInstance.prototype.extractScrollTargetPosition = function () {
            var scrollTargetElement = this.getScrollTargetElement();
            if (scrollTargetElement === null || scrollTargetElement === undefined) {
                // Scroll target not found
                return { top: NaN, left: NaN };
            }
            if (this.isInlineScrolling) {
                return PageScrollInstance.getInlineScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);
            }
            return PageScrollInstance.getScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);
        };
        /**
         * Get the top offset of the scroll animation.
         * This automatically takes the offset location of the scrolling container/scrolling view
         * into account (for nested/inline scrolling).
         */
        PageScrollInstance.prototype.getCurrentOffset = function () {
            return this.pageScrollOptions.scrollOffset;
        };
        /**
         * Sets the "scrollTop" or "scrollLeft" property for all scrollViews to the provided value
         * @return true if at least for one ScrollTopSource the scrollTop/scrollLeft value could be set and it kept the new value.
         *          false if it failed for all ScrollViews, meaning that we should stop the animation
         *          (probably because we're at the end of the scrolling region)
         */
        PageScrollInstance.prototype.setScrollPosition = function (position) {
            var _this = this;
            // Set the new scrollTop/scrollLeft to all scrollViews elements
            return this.pageScrollOptions.scrollViews.reduce(function (oneAlreadyWorked, scrollingView) {
                var startScrollPropertyValue = _this.getScrollPropertyValue(scrollingView);
                if (scrollingView && startScrollPropertyValue !== undefined && startScrollPropertyValue !== null) {
                    var scrollDistance = Math.abs(startScrollPropertyValue - position);
                    // The movement we need to perform is less than 2px
                    // This we consider a small movement which some browser may not perform when
                    // changing the scrollTop/scrollLeft property
                    // Thus in this cases we do not stop the scroll animation, although setting the
                    // scrollTop/scrollLeft value "fails"
                    var isSmallMovement = scrollDistance < _this.pageScrollOptions._minScrollDistance;
                    if (!_this.pageScrollOptions.verticalScrolling) {
                        scrollingView.scrollLeft = position;
                    }
                    else {
                        scrollingView.scrollTop = position;
                    }
                    // Return true if setting the new scrollTop/scrollLeft value worked
                    // We consider that it worked if the new scrollTop/scrollLeft value is closer to the
                    // desired scrollTop/scrollLeft than before (it might not be exactly the value we
                    // set due to dpi or rounding irregularities)
                    if (isSmallMovement || scrollDistance > Math.abs(_this.getScrollPropertyValue(scrollingView) - position)) {
                        return true;
                    }
                }
                return oneAlreadyWorked;
            }, false);
        };
        /**
         * Trigger firing a animation finish event
         * @param value Whether the animation finished at the target (true) or got interrupted (false)
         */
        PageScrollInstance.prototype.fireEvent = function (value) {
            if (this.pageScrollOptions.scrollFinishListener) {
                this.pageScrollOptions.scrollFinishListener.emit(value);
            }
        };
        /**
         * Attach the interrupt listeners to the PageScrollInstance body. The given interruptReporter
         * will be called if any of the attached events is fired.
         *
         * Possibly attached interruptListeners are automatically removed from the body before the new one will be attached.
         */
        PageScrollInstance.prototype.attachInterruptListeners = function (interruptReporter) {
            var _this = this;
            if (this.interruptListenersAttached) {
                // Detach possibly existing listeners first
                this.detachInterruptListeners();
            }
            this.interruptListener = function (event) {
                interruptReporter.report(event, _this);
            };
            this.pageScrollOptions.interruptEvents.forEach(function (event) { return _this.pageScrollOptions.document.body.addEventListener(event, _this.interruptListener); });
            this.interruptListenersAttached = true;
        };
        /**
         * Remove event listeners from the body and stop listening for events that might be treated as "animation
         * interrupt" events.
         */
        PageScrollInstance.prototype.detachInterruptListeners = function () {
            var _this = this;
            this.pageScrollOptions.interruptEvents.forEach(function (event) { return _this.pageScrollOptions.document.body.removeEventListener(event, _this.interruptListener); });
            this.interruptListenersAttached = false;
        };
        PageScrollInstance.prototype.getScrollTargetElement = function () {
            if (typeof this.pageScrollOptions.scrollTarget === 'string') {
                var targetSelector = this.pageScrollOptions.scrollTarget;
                if (targetSelector.match(/^#[^\s]+$/g) !== null) {
                    // It's an id selector and a valid id, as it does not contain any white space characters
                    return this.pageScrollOptions.document.getElementById(targetSelector.substr(1));
                }
                return this.pageScrollOptions.document.querySelector(targetSelector);
            }
            return this.pageScrollOptions.scrollTarget;
        };
        return PageScrollInstance;
    }());

    var NGXPS_CONFIG = new core.InjectionToken('ngxps_config');
    var ɵ0 = function (t, b, c, d) {
        // Linear easing
        return c * t / d + b;
    };
    var defaultPageScrollConfig = {
        _interval: 10,
        _minScrollDistance: 2,
        _logLevel: 1,
        namespace: 'default',
        verticalScrolling: true,
        duration: 1250,
        scrollOffset: 0,
        advancedInlineOffsetCalculation: false,
        interruptEvents: ['mousedown', 'wheel', 'DOMMouseScroll', 'mousewheel', 'keyup', 'touchmove'],
        interruptKeys: [' ', 'Escape', 'Tab', 'Enter', 'PageUp', 'PageDown', 'Home', 'End', 'ArrowUp', 'ArrowRight', 'ArrowLeft', 'ArrowDown'],
        interruptible: true,
        scrollInView: true,
        easingLogic: ɵ0,
    };

    var PageScrollService = /** @class */ (function () {
        function PageScrollService(customConfig) {
            var _this = this;
            this.runningInstances = [];
            this.onInterrupted = {
                report: function (event, pageScrollInstance) {
                    if (!pageScrollInstance.pageScrollOptions.interruptible) {
                        // Non-interruptible anyway, so do not stop anything
                        return;
                    }
                    var shouldStop = true;
                    if (event.type === 'keyup') {
                        // Only stop if specific keys have been pressed, for all others don't stop anything
                        if (_this.config.interruptKeys.indexOf(event.key) === -1) {
                            // The pressed key is not in the list of interrupting keys
                            shouldStop = false;
                        }
                    }
                    else if (event.type === 'mousedown') {
                        // For mousedown events we only stop the scroll animation of the mouse has
                        // been clicked inside the scrolling container
                        if (!pageScrollInstance.pageScrollOptions.scrollViews.some(function (scrollingView) { return scrollingView.contains(event.target); })) {
                            // Mouse clicked an element which is not inside any of the the scrolling containers
                            shouldStop = false;
                        }
                    }
                    if (shouldStop) {
                        _this.stopAll(pageScrollInstance.pageScrollOptions.namespace);
                    }
                },
            };
            this.config = __assign(__assign({}, defaultPageScrollConfig), customConfig);
            if (PageScrollService_1.instanceCounter > 0 &&
                (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && core.isDevMode()))) {
                console.warn('An instance of PageScrollService already exists, usually ' +
                    'including one provider should be enough, so double check.');
            }
            PageScrollService_1.instanceCounter++;
        }
        PageScrollService_1 = PageScrollService;
        PageScrollService.prototype.stopInternal = function (interrupted, pageScrollInstance) {
            var index = this.runningInstances.indexOf(pageScrollInstance);
            if (index >= 0) {
                this.runningInstances.splice(index, 1);
            }
            if (pageScrollInstance.interruptListenersAttached) {
                pageScrollInstance.detachInterruptListeners();
            }
            if (pageScrollInstance.timer) {
                // Clear/Stop the timer
                clearInterval(pageScrollInstance.timer);
                // Clear the reference to this timer
                pageScrollInstance.timer = undefined;
                pageScrollInstance.fireEvent(!interrupted);
                return true;
            }
            return false;
        };
        PageScrollService.prototype.create = function (options) {
            return new PageScrollInstance(__assign(__assign({}, this.config), options));
        };
        /**
         * Start a scroll animation. All properties of the animation are stored in the given {@link PageScrollInstance} object.
         *
         * This is the core functionality of the whole library.
         */
        // tslint:disable-next-line:cyclomatic-complexity
        PageScrollService.prototype.start = function (pageScrollInstance) {
            var _this = this;
            // Merge the default options in the pageScrollInstance options
            pageScrollInstance.pageScrollOptions = __assign(__assign({}, this.config), pageScrollInstance.pageScrollOptions);
            // Stop all possibly running scroll animations in the same namespace
            this.stopAll(pageScrollInstance.pageScrollOptions.namespace);
            if (pageScrollInstance.pageScrollOptions.scrollViews === null || pageScrollInstance.pageScrollOptions.scrollViews.length === 0) {
                // No scrollViews specified, thus we can't animate anything
                if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && core.isDevMode())) {
                    console.warn('No scrollViews specified, thus ngx-page-scroll does not know which DOM elements to scroll');
                }
                return;
            }
            var startScrollPositionFound = false;
            var scrollRange = pageScrollInstance.getScrollClientPropertyValue(pageScrollInstance.pageScrollOptions.scrollViews[0]);
            // Reset start scroll position to 0. If any of the scrollViews has a different one, it will be extracted next
            pageScrollInstance.startScrollPosition = 0;
            // Get the start scroll position from the scrollViews (e.g. if the user already scrolled down the content)
            pageScrollInstance.pageScrollOptions.scrollViews.forEach(function (scrollingView) {
                if (scrollingView === undefined || scrollingView === null) {
                    return;
                }
                // Get the scrollTop or scrollLeft value of the first scrollingView that returns a value for its "scrollTop"
                // or "scrollLeft" property that is not undefined and unequal to 0
                var scrollPosition = pageScrollInstance.getScrollPropertyValue(scrollingView);
                if (!startScrollPositionFound && scrollPosition) {
                    // We found a scrollingView that does not have scrollTop or scrollLeft 0
                    // Return the scroll position value, as this will be our startScrollPosition
                    pageScrollInstance.startScrollPosition = scrollPosition;
                    startScrollPositionFound = true;
                    // Remember te scrollRange of this scrollingView
                    scrollRange = pageScrollInstance.getScrollClientPropertyValue(scrollingView);
                }
            });
            var pageScrollOffset = pageScrollInstance.getCurrentOffset();
            // Calculate the target position that the scroll animation should go to
            var scrollTargetPosition = pageScrollInstance.extractScrollTargetPosition();
            pageScrollInstance.targetScrollPosition = Math.round((pageScrollInstance.pageScrollOptions.verticalScrolling ? scrollTargetPosition.top : scrollTargetPosition.left) - pageScrollOffset);
            // Calculate the distance we need to go in total
            pageScrollInstance.distanceToScroll = pageScrollInstance.targetScrollPosition - pageScrollInstance.startScrollPosition;
            if (isNaN(pageScrollInstance.distanceToScroll)) {
                // We weren't able to find the target position, maybe the element does not exist?
                if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && core.isDevMode())) {
                    console.log('Scrolling not possible, as we can\'t find the specified target');
                }
                pageScrollInstance.fireEvent(false);
                return;
            }
            // We're at the final destination already
            // OR we need to scroll down but are already at the end
            // OR we need to scroll up but are at the top already
            var allReadyAtDestination = Math.abs(pageScrollInstance.distanceToScroll) < pageScrollInstance.pageScrollOptions._minScrollDistance;
            // Check how long we need to scroll if a speed option is given
            // Default executionDuration is the specified duration
            pageScrollInstance.executionDuration = pageScrollInstance.pageScrollOptions.duration;
            // Maybe we need to pay attention to the speed option?
            if ((pageScrollInstance.pageScrollOptions.speed !== undefined && pageScrollInstance.pageScrollOptions.speed !== null) &&
                (pageScrollInstance.pageScrollOptions.duration === undefined || pageScrollInstance.pageScrollOptions.duration === null)) {
                // Speed option is set and no duration => calculate duration based on speed and scroll distance
                pageScrollInstance.executionDuration =
                    Math.abs(pageScrollInstance.distanceToScroll) / pageScrollInstance.pageScrollOptions.speed * 1000;
            }
            // We should go there directly, as our "animation" would have one big step
            // only anyway and this way we save the interval stuff
            var tooShortInterval = pageScrollInstance.executionDuration <= pageScrollInstance.pageScrollOptions._interval;
            if (allReadyAtDestination || tooShortInterval) {
                if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && core.isDevMode())) {
                    if (allReadyAtDestination) {
                        console.log('Scrolling not possible, as we can\'t get any closer to the destination');
                    }
                    else {
                        console.log('Scroll duration shorter that interval length, jumping to target');
                    }
                }
                pageScrollInstance.setScrollPosition(pageScrollInstance.targetScrollPosition);
                pageScrollInstance.fireEvent(true);
                return;
            }
            if (!pageScrollInstance.pageScrollOptions.scrollInView) {
                var alreadyInView = pageScrollInstance.targetScrollPosition > pageScrollInstance.startScrollPosition &&
                    pageScrollInstance.targetScrollPosition <= pageScrollInstance.startScrollPosition + scrollRange;
                if (alreadyInView) {
                    if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && core.isDevMode())) {
                        console.log('Not scrolling, as target already in view');
                    }
                    pageScrollInstance.fireEvent(true);
                    return;
                }
            }
            // Register the interrupt listeners if we want an interruptible scroll animation
            if (pageScrollInstance.pageScrollOptions.interruptible) {
                pageScrollInstance.attachInterruptListeners(this.onInterrupted);
            }
            // Let's get started, get the start time...
            pageScrollInstance.startTime = new Date().getTime();
            // .. and calculate the end time (when we need to finish at last)
            pageScrollInstance.endTime = pageScrollInstance.startTime + pageScrollInstance.executionDuration;
            pageScrollInstance.timer = setInterval(function (_pageScrollInstance) {
                // Take the current time
                var currentTime = new Date().getTime();
                // Determine the new scroll position
                var newScrollPosition;
                var stopNow = false;
                if (_pageScrollInstance.endTime <= currentTime) {
                    // We're over the time already, so go the targetScrollPosition (aka destination)
                    newScrollPosition = _pageScrollInstance.targetScrollPosition;
                    stopNow = true;
                }
                else {
                    // Calculate the scroll position based on the current time using the easing function
                    newScrollPosition = Math.round(_pageScrollInstance.pageScrollOptions.easingLogic(currentTime - _pageScrollInstance.startTime, _pageScrollInstance.startScrollPosition, _pageScrollInstance.distanceToScroll, _pageScrollInstance.executionDuration));
                }
                if (_this.config._logLevel >= 5 && core.isDevMode()) {
                    console.warn('Scroll Position: ' + newScrollPosition);
                }
                // Set the new scrollPosition to all scrollViews elements
                if (!_pageScrollInstance.setScrollPosition(newScrollPosition)) {
                    // Setting the new scrollTop/scrollLeft value failed for all ScrollViews
                    // early stop the scroll animation to save resources
                    stopNow = true;
                }
                // At the end do the internal stop maintenance and fire the pageScrollFinish event
                // (otherwise the event might arrive at "too early")
                if (stopNow) {
                    _this.stopInternal(false, _pageScrollInstance);
                }
            }, this.config._interval, pageScrollInstance);
            // Register the instance as running one
            this.runningInstances.push(pageScrollInstance);
        };
        PageScrollService.prototype.scroll = function (options) {
            this.start(this.create(options));
        };
        /**
         * Stop all running scroll animations. Optionally limit to stop only the ones of specific namespace.
         */
        PageScrollService.prototype.stopAll = function (namespace) {
            if (this.runningInstances.length > 0) {
                var stoppedSome = false;
                for (var i = 0; i < this.runningInstances.length; ++i) {
                    var pageScrollInstance = this.runningInstances[i];
                    if (!namespace || pageScrollInstance.pageScrollOptions.namespace === namespace) {
                        stoppedSome = true;
                        this.stopInternal(true, pageScrollInstance);
                        // Decrease the counter, as we removed an item from the array we iterate over
                        i--;
                    }
                }
                return stoppedSome;
            }
            return false;
        };
        PageScrollService.prototype.stop = function (pageScrollInstance) {
            return this.stopInternal(true, pageScrollInstance);
        };
        var PageScrollService_1;
        PageScrollService.instanceCounter = 0;
        PageScrollService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [NGXPS_CONFIG,] }] }
        ]; };
        PageScrollService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function PageScrollService_Factory() { return new PageScrollService(core["ɵɵinject"](NGXPS_CONFIG)); }, token: PageScrollService, providedIn: "root" });
        PageScrollService = PageScrollService_1 = __decorate([
            core.Injectable({
                providedIn: 'root',
            }),
            __param(0, core.Inject(NGXPS_CONFIG)),
            __metadata("design:paramtypes", [Object])
        ], PageScrollService);
        return PageScrollService;
    }());

    var ɵ0$1 = {};
    var NgxPageScrollCoreModule = /** @class */ (function () {
        function NgxPageScrollCoreModule() {
        }
        NgxPageScrollCoreModule_1 = NgxPageScrollCoreModule;
        NgxPageScrollCoreModule.forRoot = function (config) {
            return {
                ngModule: NgxPageScrollCoreModule_1,
                providers: [PageScrollService, { provide: NGXPS_CONFIG, useValue: config }],
            };
        };
        var NgxPageScrollCoreModule_1;
        NgxPageScrollCoreModule = NgxPageScrollCoreModule_1 = __decorate([
            core.NgModule({
                providers: [
                    PageScrollService,
                    { provide: NGXPS_CONFIG, useValue: ɵ0$1 },
                ],
            })
        ], NgxPageScrollCoreModule);
        return NgxPageScrollCoreModule;
    }());

    exports.NGXPS_CONFIG = NGXPS_CONFIG;
    exports.NgxPageScrollCoreModule = NgxPageScrollCoreModule;
    exports.PageScrollInstance = PageScrollInstance;
    exports.PageScrollService = PageScrollService;
    exports.defaultPageScrollConfig = defaultPageScrollConfig;
    exports.ɵ0 = ɵ0$1;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-page-scroll-core.umd.js.map
