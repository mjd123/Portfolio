/* tslint:disable:no-host-metadata-property directive-selector */
import { __decorate, __metadata, __param } from "tslib";
import { Directive, EventEmitter, Inject, Input, Optional, Output } from '@angular/core';
import { NavigationCancel, NavigationEnd, NavigationError, Router, UrlTree } from '@angular/router';
import { DOCUMENT } from '@angular/common';
import { EasingLogic, PageScrollInstance, PageScrollOptions, PageScrollService } from 'ngx-page-scroll-core';
import { filter, take } from 'rxjs/operators';
let NgxPageScrollDirective = class NgxPageScrollDirective {
    constructor(pageScrollService, router, document) {
        this.pageScrollService = pageScrollService;
        this.router = router;
        this.pageScrollAdjustHash = false;
        this.pageScrollFinish = new EventEmitter();
        this.document = document;
    }
    ngOnChanges(changes) {
        // Some inputs changed, reset the pageScrollInstance
        this.pageScrollInstance = undefined;
    }
    ngOnDestroy() {
        if (this.pageScrollInstance) {
            this.pageScrollService.stop(this.pageScrollInstance);
        }
    }
    getPageScrollTarget() {
        return this.pageScrollTarget || this.href || (this.fragment ? '#' + this.fragment : '');
    }
    generatePageScrollInstance() {
        if (this.pageScrollInstance === undefined || this.pageScrollInstance === null) {
            const options = {
                document: this.document,
                scrollTarget: this.getPageScrollTarget(),
            };
            if (this.pageScroll) {
                options.namespace = this.pageScroll;
            }
            if (this.pageScrollHorizontal !== undefined && this.pageScrollHorizontal !== null) {
                options.verticalScrolling = !this.pageScrollHorizontal;
            }
            if (this.pageScrollOffset !== undefined && this.pageScrollOffset !== null) {
                options.scrollOffset = this.pageScrollOffset;
            }
            if (this.pageScrollInterruptible !== undefined && this.pageScrollInterruptible !== null) {
                options.interruptible = this.pageScrollInterruptible;
            }
            if (this.pageScrollInView !== undefined && this.pageScrollInView !== null) {
                options.scrollInView = this.pageScrollInView;
            }
            if (this.pageScrollEasing) {
                options.easingLogic = this.pageScrollEasing;
            }
            if (this.pageScrollDuration !== undefined && this.pageScrollDuration !== null) {
                options.duration = this.pageScrollDuration;
            }
            if (this.pageScrollSpeed !== undefined && this.pageScrollSpeed !== null) {
                options.speed = this.pageScrollSpeed;
            }
            if (this.pageScrollFinish) {
                options.scrollFinishListener = this.pageScrollFinish;
            }
            this.pageScrollInstance = this.pageScrollService.create(options);
        }
        return this.pageScrollInstance;
    }
    pushRouterState() {
        if (this.pageScrollAdjustHash && typeof this.pageScrollInstance.pageScrollOptions.scrollTarget === 'string'
            && this.pageScrollInstance.pageScrollOptions.scrollTarget.substr(0, 1) === '#') {
            // "Navigate" to the current route again and this time set the fragment/hash
            this.router.navigate([], {
                fragment: this.pageScrollInstance.pageScrollOptions.scrollTarget.substr(1),
                queryParamsHandling: 'preserve',
            });
        }
    }
    scroll() {
        const pageScrollInstance = this.generatePageScrollInstance();
        this.pushRouterState();
        this.pageScrollService.start(pageScrollInstance);
    }
    handleClick(clickEvent) {
        if (this.routerLink && this.router !== null && this.router !== undefined) {
            let urlTree;
            if (typeof this.routerLink === 'string') {
                urlTree = this.router.parseUrl(this.routerLink);
            }
            else {
                urlTree = this.router.createUrlTree(this.routerLink);
            }
            if (!this.router.isActive(urlTree, true)) {
                // We need to navigate their first.
                // Navigation is handled by the routerLink directive so we only need to listen for route change
                this.router.events.pipe(filter(routerEvent => {
                    // We're only interested in successful navigations or when the navigation fails
                    return routerEvent instanceof NavigationEnd || routerEvent instanceof NavigationError
                        || routerEvent instanceof NavigationCancel;
                }), 
                // Consume only one event, automatically "unsubscribing" from the event stream afterwards
                take(1)).subscribe((routerEvent) => {
                    if (routerEvent instanceof NavigationEnd) {
                        // use a timeout to start scrolling as soon as the stack is cleared
                        setTimeout(() => {
                            this.scroll();
                        }, 0);
                    }
                });
                return false; // to preventDefault()
            }
        }
        this.scroll();
        return false; // to preventDefault()
    }
};
NgxPageScrollDirective.ctorParameters = () => [
    { type: PageScrollService },
    { type: Router, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxPageScrollDirective.prototype, "routerLink", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NgxPageScrollDirective.prototype, "href", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NgxPageScrollDirective.prototype, "fragment", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NgxPageScrollDirective.prototype, "pageScrollTarget", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], NgxPageScrollDirective.prototype, "pageScrollHorizontal", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NgxPageScrollDirective.prototype, "pageScrollOffset", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NgxPageScrollDirective.prototype, "pageScrollDuration", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NgxPageScrollDirective.prototype, "pageScrollSpeed", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], NgxPageScrollDirective.prototype, "pageScrollEasing", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], NgxPageScrollDirective.prototype, "pageScrollInterruptible", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], NgxPageScrollDirective.prototype, "pageScrollInView", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgxPageScrollDirective.prototype, "pageScrollAdjustHash", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NgxPageScrollDirective.prototype, "pageScroll", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NgxPageScrollDirective.prototype, "pageScrollFinish", void 0);
NgxPageScrollDirective = __decorate([
    Directive({
        selector: '[pageScroll]',
        host: {
            '(click)': 'handleClick($event)',
        },
    }),
    __param(1, Optional()), __param(2, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [PageScrollService, Router, Object])
], NgxPageScrollDirective);
export { NgxPageScrollDirective };
//# sourceMappingURL=data:application/json;base64,