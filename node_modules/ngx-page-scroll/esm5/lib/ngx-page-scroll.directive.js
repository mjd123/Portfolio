/* tslint:disable:no-host-metadata-property directive-selector */
import { __decorate, __metadata, __param } from "tslib";
import { Directive, EventEmitter, Inject, Input, Optional, Output } from '@angular/core';
import { NavigationCancel, NavigationEnd, NavigationError, Router, UrlTree } from '@angular/router';
import { DOCUMENT } from '@angular/common';
import { EasingLogic, PageScrollInstance, PageScrollOptions, PageScrollService } from 'ngx-page-scroll-core';
import { filter, take } from 'rxjs/operators';
var NgxPageScrollDirective = /** @class */ (function () {
    function NgxPageScrollDirective(pageScrollService, router, document) {
        this.pageScrollService = pageScrollService;
        this.router = router;
        this.pageScrollAdjustHash = false;
        this.pageScrollFinish = new EventEmitter();
        this.document = document;
    }
    NgxPageScrollDirective.prototype.ngOnChanges = function (changes) {
        // Some inputs changed, reset the pageScrollInstance
        this.pageScrollInstance = undefined;
    };
    NgxPageScrollDirective.prototype.ngOnDestroy = function () {
        if (this.pageScrollInstance) {
            this.pageScrollService.stop(this.pageScrollInstance);
        }
    };
    NgxPageScrollDirective.prototype.getPageScrollTarget = function () {
        return this.pageScrollTarget || this.href || (this.fragment ? '#' + this.fragment : '');
    };
    NgxPageScrollDirective.prototype.generatePageScrollInstance = function () {
        if (this.pageScrollInstance === undefined || this.pageScrollInstance === null) {
            var options = {
                document: this.document,
                scrollTarget: this.getPageScrollTarget(),
            };
            if (this.pageScroll) {
                options.namespace = this.pageScroll;
            }
            if (this.pageScrollHorizontal !== undefined && this.pageScrollHorizontal !== null) {
                options.verticalScrolling = !this.pageScrollHorizontal;
            }
            if (this.pageScrollOffset !== undefined && this.pageScrollOffset !== null) {
                options.scrollOffset = this.pageScrollOffset;
            }
            if (this.pageScrollInterruptible !== undefined && this.pageScrollInterruptible !== null) {
                options.interruptible = this.pageScrollInterruptible;
            }
            if (this.pageScrollInView !== undefined && this.pageScrollInView !== null) {
                options.scrollInView = this.pageScrollInView;
            }
            if (this.pageScrollEasing) {
                options.easingLogic = this.pageScrollEasing;
            }
            if (this.pageScrollDuration !== undefined && this.pageScrollDuration !== null) {
                options.duration = this.pageScrollDuration;
            }
            if (this.pageScrollSpeed !== undefined && this.pageScrollSpeed !== null) {
                options.speed = this.pageScrollSpeed;
            }
            if (this.pageScrollFinish) {
                options.scrollFinishListener = this.pageScrollFinish;
            }
            this.pageScrollInstance = this.pageScrollService.create(options);
        }
        return this.pageScrollInstance;
    };
    NgxPageScrollDirective.prototype.pushRouterState = function () {
        if (this.pageScrollAdjustHash && typeof this.pageScrollInstance.pageScrollOptions.scrollTarget === 'string'
            && this.pageScrollInstance.pageScrollOptions.scrollTarget.substr(0, 1) === '#') {
            // "Navigate" to the current route again and this time set the fragment/hash
            this.router.navigate([], {
                fragment: this.pageScrollInstance.pageScrollOptions.scrollTarget.substr(1),
                queryParamsHandling: 'preserve',
            });
        }
    };
    NgxPageScrollDirective.prototype.scroll = function () {
        var pageScrollInstance = this.generatePageScrollInstance();
        this.pushRouterState();
        this.pageScrollService.start(pageScrollInstance);
    };
    NgxPageScrollDirective.prototype.handleClick = function (clickEvent) {
        var _this = this;
        if (this.routerLink && this.router !== null && this.router !== undefined) {
            var urlTree = void 0;
            if (typeof this.routerLink === 'string') {
                urlTree = this.router.parseUrl(this.routerLink);
            }
            else {
                urlTree = this.router.createUrlTree(this.routerLink);
            }
            if (!this.router.isActive(urlTree, true)) {
                // We need to navigate their first.
                // Navigation is handled by the routerLink directive so we only need to listen for route change
                this.router.events.pipe(filter(function (routerEvent) {
                    // We're only interested in successful navigations or when the navigation fails
                    return routerEvent instanceof NavigationEnd || routerEvent instanceof NavigationError
                        || routerEvent instanceof NavigationCancel;
                }), 
                // Consume only one event, automatically "unsubscribing" from the event stream afterwards
                take(1)).subscribe(function (routerEvent) {
                    if (routerEvent instanceof NavigationEnd) {
                        // use a timeout to start scrolling as soon as the stack is cleared
                        setTimeout(function () {
                            _this.scroll();
                        }, 0);
                    }
                });
                return false; // to preventDefault()
            }
        }
        this.scroll();
        return false; // to preventDefault()
    };
    NgxPageScrollDirective.ctorParameters = function () { return [
        { type: PageScrollService },
        { type: Router, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxPageScrollDirective.prototype, "routerLink", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxPageScrollDirective.prototype, "href", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxPageScrollDirective.prototype, "fragment", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxPageScrollDirective.prototype, "pageScrollTarget", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxPageScrollDirective.prototype, "pageScrollHorizontal", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NgxPageScrollDirective.prototype, "pageScrollOffset", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NgxPageScrollDirective.prototype, "pageScrollDuration", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NgxPageScrollDirective.prototype, "pageScrollSpeed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], NgxPageScrollDirective.prototype, "pageScrollEasing", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxPageScrollDirective.prototype, "pageScrollInterruptible", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxPageScrollDirective.prototype, "pageScrollInView", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxPageScrollDirective.prototype, "pageScrollAdjustHash", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxPageScrollDirective.prototype, "pageScroll", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxPageScrollDirective.prototype, "pageScrollFinish", void 0);
    NgxPageScrollDirective = __decorate([
        Directive({
            selector: '[pageScroll]',
            host: {
                '(click)': 'handleClick($event)',
            },
        }),
        __param(1, Optional()), __param(2, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [PageScrollService, Router, Object])
    ], NgxPageScrollDirective);
    return NgxPageScrollDirective;
}());
export { NgxPageScrollDirective };
//# sourceMappingURL=data:application/json;base64,